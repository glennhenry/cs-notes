"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[7331],{96542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var s=n(85893),a=n(11151);const i={slug:"/database-system/trigger-and-constraints",id:"trigger-and-constraints",title:"Trigger & Constraints",description:"Trigger & Constraints"},r=void 0,o={id:"database-system/trigger-and-constraints/trigger-and-constraints",title:"Trigger & Constraints",description:"Trigger & Constraints",source:"@site/docs/database-system/06-trigger-and-constraints/trigger-and-constraints.md",sourceDirName:"database-system/06-trigger-and-constraints",slug:"/database-system/trigger-and-constraints",permalink:"/cs-notes/database-system/trigger-and-constraints",draft:!1,unlisted:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/database-system/06-trigger-and-constraints/trigger-and-constraints.md",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1706610644,formattedLastUpdatedAt:"Jan 30, 2024",frontMatter:{slug:"/database-system/trigger-and-constraints",id:"trigger-and-constraints",title:"Trigger & Constraints",description:"Trigger & Constraints"},sidebar:"sidebar",previous:{title:"Transactions",permalink:"/cs-notes/database-system/transactions"},next:{title:"Backup & Recovery",permalink:"/cs-notes/database-system/backup-and-recovery"}},l={},c=[{value:"Constraints",id:"constraints",level:3},{value:"Trigger",id:"trigger",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Main Source :"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Database_trigger",children:"Database trigger - Wikipedia"})})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Relational_database#Constraints",children:"Relational database, Constraints - Wikipedia"})})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"https://www.w3schools.com/sql/sql_constraints.asp",children:"SQL Constraints - w3schools"})})}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"constraints",children:"Constraints"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Constraints"})," are rules or conditions that are enforced on the data in a database table. In ",(0,s.jsx)(t.a,{href:"/database-system/query-language#sql",children:"SQL"}),", there are several types of constraints that can be applied to database tables :"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"PRIMARY KEY"})," : Used to uniquely identify each row in a table. It enforces specified column(s) have unique values and cannot contain null values. Typically, a primary key is created on columns that uniquely identify the rows, such as an ID column."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"FOREIGN KEY"})," : A FOREIGN KEY constraint enforces a relationship between two tables. It ensures that the values in a column(s) of one table match the values in the primary key column(s) of another table. This constraint maintains referential integrity and enforces the relationship between the tables."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"DEFAULT"})," : Specifies a default value for a column when no value is explicitly provided during an ",(0,s.jsx)(t.code,{children:"INSERT"})," statement."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"UNIQUE"})," : Ensures that the non-null values in a column(s) are unique across all rows in a table."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"NOT NULL"})," : Ensures that a column cannot have null values. It requires that the column must have a value for every row and disallows the insertion of null values."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"CHECK"})," : Specifies a condition that must be satisfied for the values in a column(s). For example, we can use the ",(0,s.jsx)(t.code,{children:"CHECK"})," constraint to specify that a numeric column must be positive or that a character column must have a certain length."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"CREATE INDEX"})," : Creates ",(0,s.jsx)(t.a,{href:"/database-system/database-optimization#index",children:"index"})," in table for performance optimization."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"trigger",children:"Trigger"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Database Trigger"})," is a stored program or set of instructions that is automatically executed or fired in response to certain events or actions occurring in a database. Triggers are defined and associated with specific tables, and they are triggered by specific data manipulation language (DML) statements or data definition language (DDL) statements."]}),"\n",(0,s.jsx)(t.admonition,{type:"info",children:(0,s.jsxs)(t.p,{children:["A ",(0,s.jsx)(t.code,{children:"CHECK"})," constraints checks each row based on data modification, while database trigger perform actions based on events. DBMS will reject the data modification operation and raise an error in ",(0,s.jsx)(t.code,{children:"CHECK"})," constraint, while trigger is more flexible and customizable, allowing us to integrate our own logic."]})}),"\n",(0,s.jsx)(t.p,{children:"Triggers can be classified into two levels :"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Row-Level Triggers"})," : Row-level triggers are executed once for each row affected by the triggering event."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Statement-Level Triggers"})," : Statement-level triggers are executed once for each triggering statement, regardless of the number of rows affected by the statement (even if no rows are affected)."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Based on the execution time, there are three :"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Before (Statement-Level Trigger)"})," : Executed before the triggering event takes place and before any modifications are made."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"After (Statement-Level Trigger)"})," : Executed after the triggering event and the modification of data have occurred."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Before (Row-Level Trigger)"})," : Executed before each affected row is modified by the triggering event."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Example of after statement-level trigger (syntax may vary depending on the DBMS) :"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sql",children:"CREATE TRIGGER insert_employee_audit\nAFTER INSERT ON Employees\nFOR EACH STATEMENT\nBEGIN\n  INSERT INTO EmployeeAudit (employee_id, employee_name, hire_date)\n  SELECT employee_id, employee_name, hire_date\n  FROM inserted;\nEND;\n"})}),"\n",(0,s.jsxs)(t.p,{children:["One of the use of trigger is to log some information. We have a table called ",(0,s.jsx)(t.code,{children:"Employees"})," that contains information about employees in a company. Whenever a new employee is inserted into the table, we will log the employee's information into ",(0,s.jsx)(t.code,{children:"EmployeeAudit"})," table."]})]})}function h(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var s=n(67294);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);