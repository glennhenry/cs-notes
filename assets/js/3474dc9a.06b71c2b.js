"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[8942],{27544:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var t=s(85893),r=s(11151);const i={slug:"/operating-system/kernel",id:"kernel",title:"Kernel",description:"Kernel"},a=void 0,o={id:"operating-system/kernel/kernel",title:"Kernel",description:"Kernel",source:"@site/docs/operating-system/02-kernel/kernel.md",sourceDirName:"operating-system/02-kernel",slug:"/operating-system/kernel",permalink:"/cs-notes/operating-system/kernel",draft:!1,unlisted:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/operating-system/02-kernel/kernel.md",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1709979564,formattedLastUpdatedAt:"Mar 9, 2024",frontMatter:{slug:"/operating-system/kernel",id:"kernel",title:"Kernel",description:"Kernel"},sidebar:"sidebar",previous:{title:"OS Fundamentals",permalink:"/cs-notes/operating-system/os-fundamentals"},next:{title:"Process Management",permalink:"/cs-notes/operating-system/process-management"}},l={},c=[{value:"Kernel Functionality",id:"kernel-functionality",level:3},{value:"Kernel Design",id:"kernel-design",level:3},{value:"Monolithic Kernels",id:"monolithic-kernels",level:4},{value:"Microkernels",id:"microkernels",level:4},{value:"Hybrid Kernels",id:"hybrid-kernels",level:4}];function d(e){const n={a:"a",admonition:"admonition",br:"br",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Main Source :"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Kernel_(operating_system)",children:"Kernel - Wikipedia"})})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"https://stackoverflow.com/questions/2013937/what-is-an-os-kernel-how-does-it-differ-from-an-operating-system",children:"What is an OS kernel ? How does it differ from an operating system? [closed] - stackoverflow"})})}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Kernel"})," is the core of an operating system (OS), it is the component of OS that manages hardware resources, provide system service, handle communication between processes, etc. It has a complete control over the system and interact directly with the hardware."]}),"\n",(0,t.jsx)(n.p,{children:'The difference between OS and kernel is, a kernel is just the "brain" or the logic of the computer system. While an OS is a broader concept, it is a complete software application with kernel included. OS provides another layer of abstraction for end user, such as window, user interface, API and library for making applications, where all of these are built on top of the kernel.'}),"\n",(0,t.jsx)(n.p,{children:"In conclusion, the kernel is the heart of the operating system, managing the low-level hardware and providing core operating system services. The operating system, including the kernel, provides a complete software platform that enables applications to run and interact with the hardware effectively."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Abstraction between kernel and end application",src:s(64259).Z+"",width:"370",height:"250"}),(0,t.jsx)(n.br,{}),"\n","Source : ",(0,t.jsx)(n.a,{href:"https://thecustomizewindows.com/2012/07/kernel-of-operating-system/",children:"https://thecustomizewindows.com/2012/07/kernel-of-operating-system/"})]}),"\n",(0,t.jsx)(n.h3,{id:"kernel-functionality",children:"Kernel Functionality"}),"\n",(0,t.jsx)(n.p,{children:"Some function of kernel :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Process Management"})," : Manages the execution of processes, schedules and allocates processor time to different processes, switches between them, handle communication between processes (IPC), and many mechanisms for process creation, termination, and synchronization."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Management"})," : The kernel allocates memory to processes, tracks memory usage, and handles memory deallocation when a process is no longer in use."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Device Management"})," : Kernel enable communication between operating system and hardware devices such as disks, network interfaces, and input/output devices through ",(0,t.jsx)(n.strong,{children:"device drivers"}),". The kernel handles device initialization, manages device resources, and provides an interface for user applications to access and control devices."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"File System Management"})," : Kernel manages the organization and storage of files on disk by providing file system that handle file creation, deletion, reading, and writing."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"System Call Interface"})," : The kernel provides a set of system calls, which are functions that allow user applications to request services from the operating system. By service, those are system functionality which can be file operations, network communication, or etc. These system calls are requested via interface, typically from wrapper functions provided by the operating system to abstract the low-level details of the system call invocation process."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Interrupt Handling"})," : Handles interrupts generated by hardware devices or exceptional events. It receives and prioritizes interrupts, determines the appropriate response, and dispatches interrupt handler to handle the interrupts."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Kernel is a very important program in an OS, it is the first program loaded and will run at all times. At the start, the kernel is responsible for initializing hardware components, including the processor, setting up memory management, initializing devices and communication with peripherals."}),"\n",(0,t.jsxs)(n.p,{children:["Because the kernel interact directly with the hardware, the security of kernel is important. The memory of kernel is typically separated from application memory, this is to ensure that application can't directly access or modify sensitive kernel data or interfere with critical system operations. The protected kernel's memory is often called ",(0,t.jsx)(n.strong,{children:"kernel space"}),", and the application's memory is called ",(0,t.jsx)(n.strong,{children:"user space"}),". The kernel will also implement memory protection mechanisms to prevent processes from accessing unauthorized memory locations."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Kernel memory",src:s(3133).Z+"",width:"512",height:"517"}),(0,t.jsx)(n.br,{}),"\n","Source : ",(0,t.jsx)(n.a,{href:"https://www.quora.com/What-is-meant-by-kernel-memory-is-not-page-able",children:"https://www.quora.com/What-is-meant-by-kernel-memory-is-not-page-able"})]}),"\n",(0,t.jsx)(n.h3,{id:"kernel-design",children:"Kernel Design"}),"\n",(0,t.jsx)(n.p,{children:"Depending on the goals, the design of a kernel involves making decisions about various aspects of its architecture, organization, and functionality. For example, how will system calls interface looks like, which strategy is used to manage process, what technique is used for memory management, the organization of file system, etc."}),"\n",(0,t.jsx)(n.h4,{id:"monolithic-kernels",children:"Monolithic Kernels"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Monolithic kernel"})," is a kernel architecture, where the entire operating system, including all essential services and functionalities, is implemented as a single, large kernel image."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"A kernel image is a binary file that contains the compiled and linked code of the kernel of an operating system. It represents the executable form of the kernel that can be loaded into memory and executed by the computer's hardware."})}),"\n",(0,t.jsx)(n.p,{children:"In this design, all kernel services, such as process management, memory management, file system support, and device drivers, reside in kernel space. The benefits of monolithic kernels is that they are in a single address space, we can directly access and share data structures and resources, making communication and coordination between kernel components efficient."}),"\n",(0,t.jsx)(n.p,{children:"However, as the kernel grows, development process can become more complex. A change or update to one component may require modifying and recompiling the entire kernel. One bug in some part of kernel may affect other component of kernel."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Monolithic kernel",src:s(86360).Z+"",width:"550",height:"361"}),(0,t.jsx)(n.br,{}),"\n","Source : ",(0,t.jsx)(n.a,{href:"http://www.javatpoint.com/monolithic-structure-of-operating-system",children:"www.javatpoint.com/monolithic-structure-of-operating-system"})]}),"\n",(0,t.jsx)(n.h4,{id:"microkernels",children:"Microkernels"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Microkernels"})," architecture aims to keep the kernel minimal by implementing only the most essential services, such as memory management, multitasking, IPC in kernel space. Additional functionality, such as file systems, device drivers, and networking, is moved to user space as separate processes or modules, called ",(0,t.jsx)(n.strong,{children:"server"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The communication between each server or between server and microkernel relies on message passing. While it can be easier to maintain compared to monolithic kernels, the exchange of messages to request services or share information can introduce some overhead compared to direct function calls in a monolithic kernel."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Microkernels",src:s(34045).Z+"",width:"357",height:"262"}),(0,t.jsx)(n.br,{}),"\n","Source : ",(0,t.jsx)(n.a,{href:"https://www.scaler.com/topics/microkernel-operating-system/",children:"https://www.scaler.com/topics/microkernel-operating-system/"})]}),"\n",(0,t.jsx)(n.h4,{id:"hybrid-kernels",children:"Hybrid Kernels"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Hybrid Kernels"})," combine both monolithic and microkernel architectures. It attempts to strike a balance between performance and modularity by incorporating features from both approaches. Some essential services and functionalities, such as process management and memory management, are implemented in kernel space, similar to a monolithic kernel. At the same time, other non-essential services, such as file systems, device drivers, and networking protocols, are implemented as separate modules or processes in user space, similar to a microkernel."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Hybrid kernels",src:s(53753).Z+"",width:"1644",height:"420"}),(0,t.jsx)(n.br,{}),"\n","Source : ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Hybrid_kernel#/media/File:OS-structure2.svg",children:"https://en.wikipedia.org/wiki/Hybrid_kernel#/media/File:OS-structure2.svg"})]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},53753:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/hybrid-384397956f2936ae7b73aa0eb742a711.png"},64259:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/kernel-abstraction-64fc1bd56551116abb3b594908c98441.png"},3133:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/kernel-memory-a0d97acbc9f51041e1aecca89a8bea97.png"},34045:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/microkernel-5f9fff404173687b13b407a6b086d04a.png"},86360:(e,n,s)=>{s.d(n,{Z:()=>t});const t=s.p+"assets/images/monolithic-90767fc39eff6944bf07a2d0e842a3e3.png"},11151:(e,n,s)=>{s.d(n,{Z:()=>o,a:()=>a});var t=s(67294);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);