"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[384],{3905:(e,a,t)=>{t.d(a,{Zo:()=>o,kt:()=>k});var n=t(67294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=n.createContext({}),l=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},o=function(e){var a=l(e.components);return n.createElement(i.Provider,{value:a},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),c=l(t),u=s,k=c["".concat(i,".").concat(u)]||c[u]||h[u]||r;return t?n.createElement(k,m(m({ref:a},o),{},{components:t})):n.createElement(k,m({ref:a},o))}));function k(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,m=new Array(r);m[0]=u;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[c]="string"==typeof e?e:s,m[1]=p;for(var l=2;l<r;l++)m[l]=t[l];return n.createElement.apply(null,m)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},27794:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>k,frontMatter:()=>p,metadata:()=>l,toc:()=>c});var n=t(87462),s=(t(67294),t(3905));const r=t.p+"assets/medias/prefix-sum-illustration-8c20388918faa6e32ee42c272e6326c7.mp4",m=t.p+"assets/medias/prefix-sum-solution-e8f4631d34bddc07dc88a4430d1d829f.mp4",p={slug:"/data-structures-and-algorithms/prefix-sum",id:"prefix-sum",title:"Prefix Sum",description:"Prefix Sum"},i=void 0,l={unversionedId:"data-structures-and-algorithms/prefix-sum/prefix-sum",id:"data-structures-and-algorithms/prefix-sum/prefix-sum",title:"Prefix Sum",description:"Prefix Sum",source:"@site/docs/data-structures-and-algorithms/22-prefix-sum/prefix-sum.mdx",sourceDirName:"data-structures-and-algorithms/22-prefix-sum",slug:"/data-structures-and-algorithms/prefix-sum",permalink:"/cs-notes/data-structures-and-algorithms/prefix-sum",draft:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/data-structures-and-algorithms/22-prefix-sum/prefix-sum.mdx",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1700907315,formattedLastUpdatedAt:"Nov 25, 2023",frontMatter:{slug:"/data-structures-and-algorithms/prefix-sum",id:"prefix-sum",title:"Prefix Sum",description:"Prefix Sum"},sidebar:"sidebar",previous:{title:"Sliding Window",permalink:"/cs-notes/data-structures-and-algorithms/sliding-window"},next:{title:"Cycle Detection",permalink:"/cs-notes/data-structures-and-algorithms/cycle-detection"}},o={},c=[{value:"Sum of K First Elements",id:"sum-of-k-first-elements",level:3},{value:"Naive Solution",id:"naive-solution",level:4},{value:"Prefix Sum Approach",id:"prefix-sum-approach",level:4}],h={toc:c},u="wrapper";function k(e){let{components:a,...t}=e;return(0,s.kt)(u,(0,n.Z)({},h,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Main Source :")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("strong",{parentName:"li"},(0,s.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Prefix_sum"},"Prefix sum - Wikipedia")))),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Prefix Sum"),", also known as ",(0,s.kt)("strong",{parentName:"p"},"cumulative sum"),", is the a sequence where each element is the sum of all the element before it, including itself."),(0,s.kt)("p",null,"A prefix is something placed before another. For instance, a prefix of an array of given element is all the element that comes before it. When we have array : ","[1, 4, 5, 7]",", the prefix of element 5 is 1 and 4. The prefix sum of this array would be another array with the same size, where each element is the sum up to each of the element itself in the original array."),(0,s.kt)("p",null,"Here is an illustration :"),(0,s.kt)("video",{width:"695",height:"392",controls:!0},(0,s.kt)("source",{src:r})),(0,s.kt)("p",null,"So the prefix sum of the array ","[1, 4, 5, 7]"," is ","[1, 5, 10, 17]",". Notice that the last element in the prefix sum is the entire sum of the array itself."),(0,s.kt)("h3",{id:"sum-of-k-first-elements"},"Sum of K First Elements"),(0,s.kt)("p",null,"The objective of this problem is to calculate the sum of the first K elements in an array. Given an array ","[1, 4, 5, 7]",", if we have a value of K equal to 2, we need to return the sum of the first two elements. In this case, the first two elements are 1 and 4, and their sum is 5. Hence, when K is 2, the expected result is 5."),(0,s.kt)("p",null,"The complexity of this problem increases when we introduce multiple values of K. In addition to the original array, we are now given an array of K that contains varying numbers."),(0,s.kt)("p",null,"Input :",(0,s.kt)("br",{parentName:"p"}),"\n","arr = ","[1, 4, 5, 7]",(0,s.kt)("br",{parentName:"p"}),"\n","k = ","[0, 2, 3, 1]"),(0,s.kt)("p",null,"Output :",(0,s.kt)("br",{parentName:"p"}),"\n","result = ","[0, 5, 10, 1]"),(0,s.kt)("p",null,"Explanation:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"For k = 0, the sum is 0 (no elements considered)."),(0,s.kt)("li",{parentName:"ul"},"For k = 2, the sum is 1 + 4 = 5 (considering the first two elements)."),(0,s.kt)("li",{parentName:"ul"},"For k = 3, the sum is 1 + 4 + 5 = 10 (considering the first three elements)."),(0,s.kt)("li",{parentName:"ul"},"For k = 1, the sum is 1 = 1 (considering the first one elements).")),(0,s.kt)("h4",{id:"naive-solution"},"Naive Solution"),(0,s.kt)("p",null,"The pseudocode for this :"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"function sumKElements(arrayOfNumber, arrayOfK)\n    result = []\n    sum = 0\n\n    for each k in arrayOfK:\n        for the first k element in arrayOfNumber:\n            sum = sum + element\n        append sum to result\n        sum = 0\n\n    return result\n")),(0,s.kt)("p",null,"We would sum up to K for each K in the arrayOfK. While this is a correct solution, it is very inefficient. As we can see in the explanation above, we did a lot of repeated work. For example, when we calculate ",(0,s.kt)("inlineCode",{parentName:"p"},"k = 3"),", we would need to add 1 + 4 + 5. When we calculate ",(0,s.kt)("inlineCode",{parentName:"p"},"k = 2"),", we would need to add 1 + 4."),(0,s.kt)("p",null,"The worst case scenario occurs when we got an array of K, where each K is a large number, making us need to sum the whole array again at each K. The worst-case scenario time complexity for this algorithm would be ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"\u2217"),(0,s.kt)("mi",{parentName:"mrow"},"k"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n * k)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2217"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," is the length of the array and ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"k")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"k")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")))))," is the length of the array of K."),(0,s.kt)("h4",{id:"prefix-sum-approach"},"Prefix Sum Approach"),(0,s.kt)("p",null,"This problem can be optimized using prefix sum approach. We will first generate the prefix sum array, and then we can just return the prefix sum array at index ",(0,s.kt)("inlineCode",{parentName:"p"},"k - 1")," (we subtract with 1 because array index starts from 0) for each K in the ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayOfK")," easily."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"function sumKElements(arrayOfNumber, arrayOfK)\n    result = []\n    prefixSum = [0]\n\n    for each number in arrayOfNumber:\n        lastSum = get last element of prefixSum\n        currentSum = lastSum + number\n        add currentSum to prefixSum\n\n    for each k in arrayOfK:\n        add prefixSum[k] to result\n\n    return result\n")),(0,s.kt)("p",null,"Here is the illustration :"),(0,s.kt)("video",{width:"695",height:"392",controls:!0},(0,s.kt)("source",{src:m})),(0,s.kt)("p",null,"To generate a prefix sum, you iterate through the array of numbers and at each iteration, add the current element to the sum accumulated so far. We will initially put 0, indicating we have accumulated 0 so far. The result of each sum is appended to the ",(0,s.kt)("inlineCode",{parentName:"p"},"prefixSum")," array, where each element represents the cumulative sum of the ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayOfNumber")," up to that specific element's index."),(0,s.kt)("p",null,"Generating prefix sum basically iterate the whole array, it takes ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," time, where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"n")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," is the length of the ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayOfNumber"),". The iteration of ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayOfK")," will result in ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"k"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(k)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")"))))),", where ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"k")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"k")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k")))))," is the length of the ",(0,s.kt)("inlineCode",{parentName:"p"},"arrayOfK"),". With both iteration together, this results in ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"O"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,s.kt)("mi",{parentName:"mrow"},"n"),(0,s.kt)("mo",{parentName:"mrow"},"+"),(0,s.kt)("mi",{parentName:"mrow"},"k"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n + k)")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"("),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03148em"}},"k"),(0,s.kt)("span",{parentName:"span",className:"mclose"},")")))))," time complexity"))}k.isMDXComponent=!0}}]);