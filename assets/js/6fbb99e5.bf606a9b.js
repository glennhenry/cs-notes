"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[8732],{18011:(e,s,a)=>{a.r(s),a.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=a(85893),n=a(11151);const i={slug:"/cloud-computing-and-distributed-systems/lambda",id:"lambda",title:"Lambda",description:"Lambda"},r=void 0,o={id:"cloud-computing-and-distributed-systems/lambda/lambda",title:"Lambda",description:"Lambda",source:"@site/docs/cloud-computing-and-distributed-systems/12-lambda/lambda.md",sourceDirName:"cloud-computing-and-distributed-systems/12-lambda",slug:"/cloud-computing-and-distributed-systems/lambda",permalink:"/cs-notes/cloud-computing-and-distributed-systems/lambda",draft:!1,unlisted:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/cloud-computing-and-distributed-systems/12-lambda/lambda.md",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1711453136,formattedLastUpdatedAt:"Mar 26, 2024",frontMatter:{slug:"/cloud-computing-and-distributed-systems/lambda",id:"lambda",title:"Lambda",description:"Lambda"},sidebar:"sidebar",previous:{title:"MapReduce",permalink:"/cs-notes/cloud-computing-and-distributed-systems/mapreduce"},next:{title:"Virtualization",permalink:"/cs-notes/cloud-computing-and-distributed-systems/virtualization"}},c={},d=[{value:"Batch Processing",id:"batch-processing",level:3},{value:"Stream Processing",id:"stream-processing",level:3},{value:"Lambda Architecture",id:"lambda-architecture",level:3}];function l(e){const s={a:"a",br:"br",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Main Source :"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"https://aws.amazon.com/what-is/batch-processing/",children:"What is Batch Processing? - aws"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Batch_processing",children:"Batch processing - Wikipedia"})})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Stream_processing",children:"Stream processing - Wikipedia"})})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Lambda is a data processing architecture designed to handle massive amounts of data in a fault-tolerant and scalable manner, combining another two techniques, namely batch processing and stream processing."}),"\n",(0,t.jsx)(s.h3,{id:"batch-processing",children:"Batch Processing"}),"\n",(0,t.jsx)(s.p,{children:"Batch processing is a method to run software program, capable of running tasks that we call jobs in batches automatically by scheduling them at certain times. The method is typically used to process large amounts of data in a single operation. By processing, this may involve backup, filtering, sorting, or aggregating."}),"\n",(0,t.jsx)(s.p,{children:"For example, a retail company wants to analyze its sales data to gain insights and make data-driven business decisions. The company can schedule batch processing which may involve collecting sales data, calculating total sales, identifying popular products, and generating sales reports. This process can be scheduled on daily basis, specifically at night, when the system experiences lower usage or during off-peak hours, to minimize user impact."}),"\n",(0,t.jsx)(s.p,{children:"A batch processing job is defined by specific language, framework, or tools. The details to be specified :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Data sources, location of data, operations to be performed, and other transformations."}),"\n",(0,t.jsx)(s.li,{children:"Dependencies or the order in which these steps need to be executed."}),"\n",(0,t.jsx)(s.li,{children:"Size of batch, how many data or work units that needs to be processed or done in one batch."}),"\n",(0,t.jsx)(s.li,{children:"Time and schedule of which the job executes."}),"\n",(0,t.jsx)(s.li,{children:"We can monitor the progress and performance of job, and set error or retry mechanism in case the execution fails."}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.img,{alt:"Batch processing",src:a(55237).Z+"",width:"700",height:"367"}),(0,t.jsx)(s.br,{}),"\n","Source : ",(0,t.jsx)(s.a,{href:"https://estuary.dev/batch-data-processing/",children:"https://estuary.dev/batch-data-processing/"})]}),"\n",(0,t.jsx)(s.h3,{id:"stream-processing",children:"Stream Processing"}),"\n",(0,t.jsx)(s.p,{children:"Stream processing (or real-time processing) is a method of data processing that involves continuously processing and analyzing streams, which is data or events produced or generated in real-time."}),"\n",(0,t.jsx)(s.p,{children:"A typical process of stream processing :"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Data Ingestion"})," : Data is produced from various data sources, such as sensors, log files, message queues, or external systems. Data is imagined as water that flows through a system continuous and potentially infinite. They are treated as a continuous stream of events or records."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Windowing"})," : Data can be processed in ",(0,t.jsx)(s.a,{href:"/data-structures-and-algorithms/sliding-window",children:"window"}),", a way to group similar or related data within specific time intervals or fixed-size data subsets."]}),"\n",(0,t.jsx)(s.p,{children:"In time-based windowing, data may be divided into fixed-duration windows, such as 5-minute, 1-hour, or daily windows. On the other hand, fixed-size window may contain fixed number of events or data points, such as every 100 records or every 1,000 records."}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Data Processing"})," : The data is applied to series of operations or functions. Operations are typically pipelined or broke down into smaller, interconnected stages or steps."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Stateful Processing"})," : Some stream processing may be stateful, meaning the data are related to each other, therefore we require a component that keeps track state or context of the processing. This can involve maintaining counters, aggregating statistics, or correlating events based on common attributes (e.g., detecting if specific sensor events is a valid gesture)."]}),"\n"]}),"\n",(0,t.jsxs)(s.li,{children:["\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Output"})," : After processing, stream processing systems generate outputs based on the defined operations and computations. This can include generating alerts, triggering actions, storing results in databases, sending data to external systems, or visualizing real-time analytics."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.img,{alt:"Stream processing",src:a(78642).Z+"",width:"1256",height:"532"}),(0,t.jsx)(s.br,{}),"\n","Source : ",(0,t.jsx)(s.a,{href:"https://www.ververica.com/what-is-stream-processing",children:"https://www.ververica.com/what-is-stream-processing"})," (cropped and upscaled)"]}),"\n",(0,t.jsx)(s.h3,{id:"lambda-architecture",children:"Lambda Architecture"}),"\n",(0,t.jsx)(s.p,{children:"By combining batch and stream processing, lambda architecture enables the processing of all the available data within specific period, as well as the real-time produced data in one go."}),"\n",(0,t.jsx)(s.p,{children:"Lambda works by dividing the batch and stream processing stage into three layers :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Batch Layer"})," : Handles the batch data that contains large volumes of historical data. Batch layer involve the use of distributed processing system capable of handling large quantities of data. It performs batch processing on the entire dataset, generating comprehensive and accurate views or summaries of the data. The technology used for this may be Apache Hadoop."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Speed Layer"})," : Speed layer deals with real-time data processing. It ingests and processes the data streams in real-time, allowing for immediate analysis and low latency to incoming data. The speed layer frameworks or technologies includes Apache Kafka or Apache Spark."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Serving Layer"})," : Serving layer provides a unified view of the processed data from both the batch layer and the speed layer. The serving layer may use technologies like Apache HBase or Apache Cassandra."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The combination of batch processing which is slower due to the need to wait for data accumulation, but provides accurate data insights. Complements stream processing, which is faster as it allows for real-time data processing and insights, although it may not be accurate."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.img,{alt:"Lambda architecture",src:a(25380).Z+"",width:"778",height:"286"}),(0,t.jsx)(s.br,{}),"\n","Source : ",(0,t.jsx)(s.a,{href:"https://medium.com/@bryzgaloff/how-to-implement-lambda-architecture-using-clickhouse-9109e78c718b",children:"https://medium.com/@bryzgaloff/how-to-implement-lambda-architecture-using-clickhouse-9109e78c718b"})]})]})}function h(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},55237:(e,s,a)=>{a.d(s,{Z:()=>t});const t=a.p+"assets/images/batch-processing-d4948c43c433ac10ba4408890258a464.png"},25380:(e,s,a)=>{a.d(s,{Z:()=>t});const t=a.p+"assets/images/lambda-architecture-2c221e4dbe3e7658389425a22d7c1626.png"},78642:(e,s,a)=>{a.d(s,{Z:()=>t});const t=a.p+"assets/images/stream-processing-640626d13e2db3306ccf7efe258ffdf0.png"},11151:(e,s,a)=>{a.d(s,{Z:()=>o,a:()=>r});var t=a(67294);const n={},i=t.createContext(n);function r(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);