"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[3899],{20202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>l,toc:()=>h});var i=n(85893),s=n(11151);const r=n.p+"assets/medias/sliding-window-illustration-605ae8a839aa8e4d646dc07df6c3d0d0.mp4",o=n.p+"assets/medias/sliding-window-example-cab17f797f9e045b448ed9c8294f7a75.mp4",d={slug:"/data-structures-and-algorithms/sliding-window",id:"sliding-window",title:"Sliding Window",description:"Sliding Window"},a=void 0,l={id:"data-structures-and-algorithms/sliding-window/sliding-window",title:"Sliding Window",description:"Sliding Window",source:"@site/docs/data-structures-and-algorithms/21-sliding-window/sliding-window.mdx",sourceDirName:"data-structures-and-algorithms/21-sliding-window",slug:"/data-structures-and-algorithms/sliding-window",permalink:"/cs-notes/data-structures-and-algorithms/sliding-window",draft:!1,unlisted:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/data-structures-and-algorithms/21-sliding-window/sliding-window.mdx",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1704883425,formattedLastUpdatedAt:"Jan 10, 2024",frontMatter:{slug:"/data-structures-and-algorithms/sliding-window",id:"sliding-window",title:"Sliding Window",description:"Sliding Window"},sidebar:"sidebar",previous:{title:"Two Pointer",permalink:"/cs-notes/data-structures-and-algorithms/two-pointer"},next:{title:"Prefix Sum",permalink:"/cs-notes/data-structures-and-algorithms/prefix-sum"}},c={},h=[{value:"Example Algorithm",id:"example-algorithm",level:3}];function w(e){const t={a:"a",code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Sliding Window"})," is a technique to solve problems similar to the ",(0,i.jsx)(t.a,{href:"/data-structures-and-algorithms/two-pointer",children:"two pointer technique"}),", with addition, sliding window also takes account whatever element inside the left and right pointer."]}),"\n",(0,i.jsxs)(t.p,{children:["In two pointers, we have two variables that point to some data structure or sequence. We can use the variables to access the data structure at the same time, to reduce iteration. On the other hand, in sliding window technique, the two pointers are utilized as a boundary within the data structure we are examining. The elements inside that boundary is called a ",(0,i.jsx)(t.strong,{children:"window"}),", which can be analyzed or processed depending on the problem."]}),"\n",(0,i.jsx)(t.p,{children:"Here is an illustration :"}),"\n",(0,i.jsx)("video",{width:"695",height:"392",controls:!0,children:(0,i.jsx)("source",{src:r})}),"\n",(0,i.jsx)(t.p,{children:"For example, we can increment the left and right pointer to move the window, increase the window size by incrementing only the right pointer, decrease the window size by incrementing only the left pointer."}),"\n",(0,i.jsx)(t.h3,{id:"example-algorithm",children:"Example Algorithm"}),"\n",(0,i.jsx)(t.p,{children:"Here is a pseudocode example of sliding window algorithm that obtain a window of given size in an array."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"function slidingWindow(arr: Array, windowSize: Int)\n    leftPointer = 0\n    rightPointer = leftPointer + windowSize - 1\n\n    while (rightPointer < size of arr):\n        leftPointer = leftPointer + 1\n        rightPointer = rightPointer + 1\n"})}),"\n",(0,i.jsx)("video",{width:"695",height:"392",controls:!0,children:(0,i.jsx)("source",{src:o})})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(w,{...e})}):w(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>o});var i=n(67294);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);