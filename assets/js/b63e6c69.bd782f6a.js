"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[852],{77532:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var t=i(85893),n=i(11151);const a={slug:"/digital-media-processing/bmp",id:"bmp",title:"BMP",description:"BMP"},r=void 0,l={id:"digital-media-processing/bmp/bmp",title:"BMP",description:"BMP",source:"@site/docs/digital-media-processing/16-bmp/bmp.md",sourceDirName:"digital-media-processing/16-bmp",slug:"/digital-media-processing/bmp",permalink:"/cs-notes/digital-media-processing/bmp",draft:!1,unlisted:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/digital-media-processing/16-bmp/bmp.md",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1723455088e3,frontMatter:{slug:"/digital-media-processing/bmp",id:"bmp",title:"BMP",description:"BMP"},sidebar:"sidebar",previous:{title:"MIME Type",permalink:"/cs-notes/digital-media-processing/mime-type"},next:{title:"JPG / JPEG",permalink:"/cs-notes/digital-media-processing/jpg-jpeg"}},o={},c=[{value:"BMP Structure",id:"bmp-structure",level:3},{value:"Indexed Color",id:"indexed-color",level:4}];function d(e){const s={a:"a",annotation:"annotation",br:"br",em:"em",h3:"h3",h4:"h4",img:"img",li:"li",math:"math",mn:"mn",mo:"mo",mrow:"mrow",msup:"msup",p:"p",semantics:"semantics",span:"span",strong:"strong",ul:"ul",...(0,n.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Main Source:"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/BMP_file_format",children:"BMP file format \u2014 Wikipedia"})})}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Bitmap (BMP)"})," is a ",(0,t.jsx)(s.a,{href:"/computer-graphics/computer-images-part-1",children:"raster image format"})," that stores pixel data for an image. BMP stores pixel data in binary format. BMP are generally uncompressed, meaning the original data doesn't undergo ",(0,t.jsx)(s.a,{href:"/digital-signal-processing/compression",children:"compression"})," process."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.img,{alt:"Bitmap binaries data",src:i(96127).Z+"",width:"694",height:"371"}),(0,t.jsx)(s.br,{}),"\n",(0,t.jsx)(s.em,{children:"raw data inside a BMP file"}),(0,t.jsx)(s.br,{}),"\n","Source: ",(0,t.jsx)(s.a,{href:"https://stackoverflow.com/questions/33483708/understanding-bmp-file",children:"https://stackoverflow.com/questions/33483708/understanding-bmp-file"})]}),"\n",(0,t.jsx)(s.h3,{id:"bmp-structure",children:"BMP Structure"}),"\n",(0,t.jsx)(s.p,{children:"BMP file contains several components:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"File Header"}),": File begins with a fixed-size header that provides general information about the file, such as the file type, size, and offset to the pixel data."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"DIB Header"}),": The DIB (Device Independent Bitmap) contains specific information about the image, such as its width and height in pixels, color depth, compression method (if any), and color palette."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Color Palette"})," (optional): For images with ",(0,t.jsx)(s.a,{href:"#indexed-color",children:"indexed color"})," (color depths of 8 bits or fewer), an optional color palette may be present. The color palette is an array of color entries that maps pixel values to specific colors."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Pixel Data"}),": After the headers, the file contains the actual pixel data. The pixel data represents the image itself, with each pixel's color or intensity information stored in a specific format based on the color depth. For example, in a 24-bit color depth BMP file, each pixel is represented by three bytes, typically in the order of blue, green, and red (BGR)."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.img,{alt:"Table summarizing all bitmap data",src:i(44510).Z+"",width:"320",height:"667"}),(0,t.jsx)(s.br,{}),"\n","Source: ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/BMP_file_format",children:"https://en.wikipedia.org/wiki/BMP_file_format"})]}),"\n",(0,t.jsx)(s.h4,{id:"indexed-color",children:"Indexed Color"}),"\n",(0,t.jsx)(s.p,{children:"Indexed color is a technique to store and represent color using a predefined color palette (usually limited). Instead of directly specifying the color of each individual pixel, indexed color images represent each pixel with an index value that corresponds to a specific color in the palette."}),"\n",(0,t.jsx)(s.p,{children:"For example, in RGB, we may represent the color red in a pixel with (255, 0, 0). This results in each pixel to occupy 24-bit. With indexed color, we can represent the same color with fewer bits. However, indexed color usually restrict the amount of color in the palette."}),"\n",(0,t.jsx)(s.p,{children:"We may define a color palette with 256 possible color. Therefore, we will need a minimum 8 bits to be able to access every color by its index in the palette. This is the reason indexed color favor image with less distinct color."}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.img,{alt:"Indexed color example",src:i(92497).Z+"",width:"150",height:"400"}),(0,t.jsx)(s.br,{}),"\n","Source: ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Indexed_color",children:"https://en.wikipedia.org/wiki/Indexed_color"})]}),"\n",(0,t.jsxs)(s.p,{children:["This image above represent the 5\xd75 grid using 2-bit color palette. This means it needs 2-bit to index a color, and can represent up to ",(0,t.jsxs)(s.span,{className:"katex",children:[(0,t.jsx)(s.span,{className:"katex-mathml",children:(0,t.jsx)(s.math,{xmlns:"http://www.w3.org/1998/Math/MathML",children:(0,t.jsxs)(s.semantics,{children:[(0,t.jsxs)(s.mrow,{children:[(0,t.jsxs)(s.msup,{children:[(0,t.jsx)(s.mn,{children:"2"}),(0,t.jsx)(s.mn,{children:"2"})]}),(0,t.jsx)(s.mo,{children:"="}),(0,t.jsx)(s.mn,{children:"4"})]}),(0,t.jsx)(s.annotation,{encoding:"application/x-tex",children:"2^2 = 4"})]})})}),(0,t.jsxs)(s.span,{className:"katex-html","aria-hidden":"true",children:[(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.8141em"}}),(0,t.jsxs)(s.span,{className:"mord",children:[(0,t.jsx)(s.span,{className:"mord",children:"2"}),(0,t.jsx)(s.span,{className:"msupsub",children:(0,t.jsx)(s.span,{className:"vlist-t",children:(0,t.jsx)(s.span,{className:"vlist-r",children:(0,t.jsx)(s.span,{className:"vlist",style:{height:"0.8141em"},children:(0,t.jsxs)(s.span,{style:{top:"-3.063em",marginRight:"0.05em"},children:[(0,t.jsx)(s.span,{className:"pstrut",style:{height:"2.7em"}}),(0,t.jsx)(s.span,{className:"sizing reset-size6 size3 mtight",children:(0,t.jsx)(s.span,{className:"mord mtight",children:"2"})})]})})})})})]}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}}),(0,t.jsx)(s.span,{className:"mrel",children:"="}),(0,t.jsx)(s.span,{className:"mspace",style:{marginRight:"0.2778em"}})]}),(0,t.jsxs)(s.span,{className:"base",children:[(0,t.jsx)(s.span,{className:"strut",style:{height:"0.6444em"}}),(0,t.jsx)(s.span,{className:"mord",children:"4"})]})]})]})," color."]})]})}function p(e={}){const{wrapper:s}={...(0,n.a)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},44510:(e,s,i)=>{i.d(s,{Z:()=>t});const t=i.p+"assets/images/all-bitmap-data-25bc1c29acb6427af2502d8cad2961e7.png"},96127:(e,s,i)=>{i.d(s,{Z:()=>t});const t=i.p+"assets/images/bitmap-90291547497dff07a9ab5642d8c30440.png"},92497:(e,s,i)=>{i.d(s,{Z:()=>t});const t=i.p+"assets/images/indexed-color-eda41c06db1e839f7cebfa3b27fb6b7f.png"},11151:(e,s,i)=>{i.d(s,{Z:()=>l,a:()=>r});var t=i(67294);const n={},a=t.createContext(n);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);