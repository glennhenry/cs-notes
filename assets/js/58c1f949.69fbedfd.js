"use strict";(self.webpackChunkcs_notes=self.webpackChunkcs_notes||[]).push([[7701],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},m=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=p(a),d=n,u=c["".concat(l,".").concat(d)]||c[d]||h[d]||i;return a?r.createElement(u,s(s({ref:t},m),{},{components:a})):r.createElement(u,s({ref:t},m))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:n,s[1]=o;for(var p=2;p<i;p++)s[p]=a[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},26779:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>m});var r=a(87462),n=(a(67294),a(3905));const i=a.p+"assets/medias/trie-traversal-878dd711bb1b44f77ca97bacae979665.mp4",s={slug:"/data-structures-and-algorithms/trie",id:"trie",title:"Trie",description:"Trie"},o=void 0,l={unversionedId:"data-structures-and-algorithms/trie/trie",id:"data-structures-and-algorithms/trie/trie",title:"Trie",description:"Trie",source:"@site/docs/data-structures-and-algorithms/11-trie/trie.mdx",sourceDirName:"data-structures-and-algorithms/11-trie",slug:"/data-structures-and-algorithms/trie",permalink:"/cs-notes/data-structures-and-algorithms/trie",draft:!1,editUrl:"https://github.com/glennhenry/cs-notes/tree/main/docs/data-structures-and-algorithms/11-trie/trie.mdx",tags:[],version:"current",lastUpdatedBy:"glennhenry",lastUpdatedAt:1700562052,formattedLastUpdatedAt:"Nov 21, 2023",frontMatter:{slug:"/data-structures-and-algorithms/trie",id:"trie",title:"Trie",description:"Trie"},sidebar:"sidebar",previous:{title:"Graph",permalink:"/cs-notes/data-structures-and-algorithms/graph"},next:{title:"Sorting",permalink:"/cs-notes/data-structures-and-algorithms/sorting"}},p={},m=[{value:"Trie Implementation",id:"trie-implementation",level:3}],c={toc:m},h="wrapper";function d(e){let{components:t,...s}=e;return(0,n.kt)(h,(0,r.Z)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Main Source :")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},(0,n.kt)("a",{parentName:"strong",href:"https://en.wikipedia.org/wiki/Trie"},"Trie - Wikipedia")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Trie"),", also known as ",(0,n.kt)("strong",{parentName:"p"},"prefix tree"),", is a type of ",(0,n.kt)("a",{parentName:"p",href:"/data-structures-and-algorithms/tree"},"tree")," data structure, which primarily used for efficient retrieval and storage of strings or sequences of characters."),(0,n.kt)("p",null,"Just like a typical tree, trie consist a set of node where each node represents a single character or a partial string. The root node represents an empty string, and each path from the root to a leaf node represents a complete string. The edges of the trie are labeled with characters, indicating the next character in the string. By traversing from the root to any path in a trie, the characters encountered along the path form a string."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Trie data structure",src:a(21486).Z,width:"433",height:"414"}),(0,n.kt)("br",{parentName:"p"}),"\n","Source : ",(0,n.kt)("a",{parentName:"p",href:"https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/800px-Trie_example.svg.png"},"https://upload.wikimedia.org/wikipedia/commons/thumb/b/be/Trie_example.svg/800px-Trie_example.svg.png")),(0,n.kt)("p",null,'For example, in the trie image above, if we traverse to the left ("t"), right ("e"), and left ("a"), sequentially from the root, we will form the string "tea".'),(0,n.kt)("p",null,"One of the main advantages of a trie is its ability to perform prefix matching efficiently and able to store common prefix among strings. Search or matching a given string involves traversing from the root following the character given in the string. All operation including search, insertion, and deletion, all happens in ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mi",{parentName:"mrow"},"O"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},"("),(0,n.kt)("mi",{parentName:"mrow"},"n"),(0,n.kt)("mo",{parentName:"mrow",stretchy:"false"},")")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"O(n)")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.02778em"}},"O"),(0,n.kt)("span",{parentName:"span",className:"mopen"},"("),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n"),(0,n.kt)("span",{parentName:"span",className:"mclose"},")")))))," time complexity, where ",(0,n.kt)("span",{parentName:"p",className:"math math-inline"},(0,n.kt)("span",{parentName:"span",className:"katex"},(0,n.kt)("span",{parentName:"span",className:"katex-mathml"},(0,n.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,n.kt)("semantics",{parentName:"math"},(0,n.kt)("mrow",{parentName:"semantics"},(0,n.kt)("mi",{parentName:"mrow"},"n")),(0,n.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"n")))),(0,n.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,n.kt)("span",{parentName:"span",className:"base"},(0,n.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,n.kt)("span",{parentName:"span",className:"mord mathnormal"},"n")))))," is the length of the string we are looking to match, insert, or delete."),(0,n.kt)("admonition",{type:"note"},(0,n.kt)("p",{parentName:"admonition"},"What is a common prefix?",(0,n.kt)("br",{parentName:"p"}),"\n",'A prefix is just a part of a string that comes before the rest of the characters. Consider the words "cat," "car," and "dog." We can say "cat" and "car" has common prefix, because both starts with string "ca" in the beginning.')),(0,n.kt)("p",null,"Trie allows for quick lookup and retrieval of all strings that have a given prefix. This property makes tries useful in applications such as autocomplete, spell checking, and searching for words with a common prefix."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Application of trie data structure in auto-complete system",src:a(29514).Z,width:"438",height:"345"}),(0,n.kt)("br",{parentName:"p"}),"\n","Source : ",(0,n.kt)("a",{parentName:"p",href:"https://youtu.be/lPgaClbZ90o?si=-WsR_bJBG6JQLgaE"},"https://youtu.be/lPgaClbZ90o?si=-WsR_bJBG6JQLgaE")),(0,n.kt)("h3",{id:"trie-implementation"},"Trie Implementation"),(0,n.kt)("p",null,"We can implement trie with a tree data structure, which can be implemented using linked list under the hood."),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Each node will represent either a character or a partial string, except the root node, containing an empty string."),(0,n.kt)("li",{parentName:"ol"},"The root node should have reference to its child, which can vary depending on the use case. If we only store character, we would only need a maximum 26 children nodes, assuming we are storing the unique alphabets."),(0,n.kt)("li",{parentName:"ol"},'We will also include a flag or boolean value in each node to indicate if that node represents the end of a complete string or not. For example, when we insert string "tea", we don\'t want to treat "te" as the complete word, so we will set the flag to false in the "t" and "e" node, while setting the flag to true in "a" node.')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Searching")," : Traverse the trie from the root node, following the path dictated by the characters of the target string. If at any point a character doesn't exist, it indicates that the string is not present in the trie. If we found all the prefix of the string, we will also check if it is a complete string."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Insertion")," : Similar to search, we will traverse from the root node, when a character exist, we will continue going down there. When a character doesn't exist, we will make a new node for it."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Deletion")," : Traverse the trie from the root node, once the string is found, we will simply mark the last node as not a complete string. We will not remove the node, to ensure we don't accidentally remove other prefix.")),(0,n.kt)("p",null,"Here is an trie traversal illustration for matching strings."),(0,n.kt)("video",{width:"695",height:"392",controls:!0},(0,n.kt)("source",{src:i})))}d.isMDXComponent=!0},29514:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/autocomplete-0b16183bfa26d7aa8bb76b1fa2f49995.png"},21486:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/trie-7002d7ad664787ae972a2aaeae72a033.png"}}]);